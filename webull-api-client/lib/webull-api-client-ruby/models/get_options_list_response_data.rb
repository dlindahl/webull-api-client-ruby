=begin
#Webull API

#Webull API Documentation

The version of the OpenAPI document: 3.0.1
Contact: austin.millan@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'date'
require 'time'

module WebullApiClient
  class GetOptionsListResponseData
    attr_accessor :active_level

    attr_accessor :ask_list

    # The ticker ID of the stock
    attr_accessor :belong_ticker_id

    attr_accessor :bid_list

    attr_accessor :change

    attr_accessor :change_ratio

    attr_accessor :close

    attr_accessor :currency_id

    attr_accessor :cycle

    attr_accessor :delta

    attr_accessor :derivative_status

    attr_accessor :direction

    attr_accessor :exchange_id

    attr_accessor :execution_type

    attr_accessor :expire_date

    attr_accessor :gamma

    attr_accessor :high

    attr_accessor :imp_vol

    attr_accessor :latest_price_vol

    attr_accessor :low

    attr_accessor :open

    attr_accessor :open_int_change

    attr_accessor :open_interest

    attr_accessor :pre_close

    attr_accessor :quote_lot_size

    attr_accessor :quote_multiplier

    attr_accessor :region_id

    attr_accessor :rho

    attr_accessor :strike_price

    attr_accessor :symbol

    attr_accessor :theta

    attr_accessor :ticker_id

    attr_accessor :un_symbol

    attr_accessor :vega

    attr_accessor :volume

    attr_accessor :weekly

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'active_level' => :'activeLevel',
        :'ask_list' => :'askList',
        :'belong_ticker_id' => :'belongTickerId',
        :'bid_list' => :'bidList',
        :'change' => :'change',
        :'change_ratio' => :'changeRatio',
        :'close' => :'close',
        :'currency_id' => :'currencyId',
        :'cycle' => :'cycle',
        :'delta' => :'delta',
        :'derivative_status' => :'derivativeStatus',
        :'direction' => :'direction',
        :'exchange_id' => :'exchangeId',
        :'execution_type' => :'executionType',
        :'expire_date' => :'expireDate',
        :'gamma' => :'gamma',
        :'high' => :'high',
        :'imp_vol' => :'impVol',
        :'latest_price_vol' => :'latestPriceVol',
        :'low' => :'low',
        :'open' => :'open',
        :'open_int_change' => :'openIntChange',
        :'open_interest' => :'openInterest',
        :'pre_close' => :'preClose',
        :'quote_lot_size' => :'quoteLotSize',
        :'quote_multiplier' => :'quoteMultiplier',
        :'region_id' => :'regionId',
        :'rho' => :'rho',
        :'strike_price' => :'strikePrice',
        :'symbol' => :'symbol',
        :'theta' => :'theta',
        :'ticker_id' => :'tickerId',
        :'un_symbol' => :'unSymbol',
        :'vega' => :'vega',
        :'volume' => :'volume',
        :'weekly' => :'weekly'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'active_level' => :'Float',
        :'ask_list' => :'Array<GetOptionsListResponseAskList1>',
        :'belong_ticker_id' => :'Integer',
        :'bid_list' => :'Array<GetOptionsListResponseBidList>',
        :'change' => :'String',
        :'change_ratio' => :'String',
        :'close' => :'String',
        :'currency_id' => :'Integer',
        :'cycle' => :'Float',
        :'delta' => :'String',
        :'derivative_status' => :'Integer',
        :'direction' => :'String',
        :'exchange_id' => :'Integer',
        :'execution_type' => :'String',
        :'expire_date' => :'Date',
        :'gamma' => :'String',
        :'high' => :'String',
        :'imp_vol' => :'String',
        :'latest_price_vol' => :'String',
        :'low' => :'String',
        :'open' => :'String',
        :'open_int_change' => :'Integer',
        :'open_interest' => :'Integer',
        :'pre_close' => :'String',
        :'quote_lot_size' => :'Integer',
        :'quote_multiplier' => :'Integer',
        :'region_id' => :'Integer',
        :'rho' => :'String',
        :'strike_price' => :'String',
        :'symbol' => :'String',
        :'theta' => :'String',
        :'ticker_id' => :'Integer',
        :'un_symbol' => :'String',
        :'vega' => :'String',
        :'volume' => :'String',
        :'weekly' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `WebullApiClient::GetOptionsListResponseData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `WebullApiClient::GetOptionsListResponseData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'active_level')
        self.active_level = attributes[:'active_level']
      end

      if attributes.key?(:'ask_list')
        if (value = attributes[:'ask_list']).is_a?(Array)
          self.ask_list = value
        end
      end

      if attributes.key?(:'belong_ticker_id')
        self.belong_ticker_id = attributes[:'belong_ticker_id']
      end

      if attributes.key?(:'bid_list')
        if (value = attributes[:'bid_list']).is_a?(Array)
          self.bid_list = value
        end
      end

      if attributes.key?(:'change')
        self.change = attributes[:'change']
      end

      if attributes.key?(:'change_ratio')
        self.change_ratio = attributes[:'change_ratio']
      end

      if attributes.key?(:'close')
        self.close = attributes[:'close']
      end

      if attributes.key?(:'currency_id')
        self.currency_id = attributes[:'currency_id']
      end

      if attributes.key?(:'cycle')
        self.cycle = attributes[:'cycle']
      end

      if attributes.key?(:'delta')
        self.delta = attributes[:'delta']
      end

      if attributes.key?(:'derivative_status')
        self.derivative_status = attributes[:'derivative_status']
      end

      if attributes.key?(:'direction')
        self.direction = attributes[:'direction']
      end

      if attributes.key?(:'exchange_id')
        self.exchange_id = attributes[:'exchange_id']
      end

      if attributes.key?(:'execution_type')
        self.execution_type = attributes[:'execution_type']
      end

      if attributes.key?(:'expire_date')
        self.expire_date = attributes[:'expire_date']
      end

      if attributes.key?(:'gamma')
        self.gamma = attributes[:'gamma']
      end

      if attributes.key?(:'high')
        self.high = attributes[:'high']
      end

      if attributes.key?(:'imp_vol')
        self.imp_vol = attributes[:'imp_vol']
      end

      if attributes.key?(:'latest_price_vol')
        self.latest_price_vol = attributes[:'latest_price_vol']
      end

      if attributes.key?(:'low')
        self.low = attributes[:'low']
      end

      if attributes.key?(:'open')
        self.open = attributes[:'open']
      end

      if attributes.key?(:'open_int_change')
        self.open_int_change = attributes[:'open_int_change']
      end

      if attributes.key?(:'open_interest')
        self.open_interest = attributes[:'open_interest']
      end

      if attributes.key?(:'pre_close')
        self.pre_close = attributes[:'pre_close']
      end

      if attributes.key?(:'quote_lot_size')
        self.quote_lot_size = attributes[:'quote_lot_size']
      end

      if attributes.key?(:'quote_multiplier')
        self.quote_multiplier = attributes[:'quote_multiplier']
      end

      if attributes.key?(:'region_id')
        self.region_id = attributes[:'region_id']
      end

      if attributes.key?(:'rho')
        self.rho = attributes[:'rho']
      end

      if attributes.key?(:'strike_price')
        self.strike_price = attributes[:'strike_price']
      end

      if attributes.key?(:'symbol')
        self.symbol = attributes[:'symbol']
      end

      if attributes.key?(:'theta')
        self.theta = attributes[:'theta']
      end

      if attributes.key?(:'ticker_id')
        self.ticker_id = attributes[:'ticker_id']
      end

      if attributes.key?(:'un_symbol')
        self.un_symbol = attributes[:'un_symbol']
      end

      if attributes.key?(:'vega')
        self.vega = attributes[:'vega']
      end

      if attributes.key?(:'volume')
        self.volume = attributes[:'volume']
      end

      if attributes.key?(:'weekly')
        self.weekly = attributes[:'weekly']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      direction_validator = EnumAttributeValidator.new('String', ["call", "put"])
      return false unless direction_validator.valid?(@direction)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] direction Object to be assigned
    def direction=(direction)
      validator = EnumAttributeValidator.new('String', ["call", "put"])
      unless validator.valid?(direction)
        fail ArgumentError, "invalid value for \"direction\", must be one of #{validator.allowable_values}."
      end
      @direction = direction
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          active_level == o.active_level &&
          ask_list == o.ask_list &&
          belong_ticker_id == o.belong_ticker_id &&
          bid_list == o.bid_list &&
          change == o.change &&
          change_ratio == o.change_ratio &&
          close == o.close &&
          currency_id == o.currency_id &&
          cycle == o.cycle &&
          delta == o.delta &&
          derivative_status == o.derivative_status &&
          direction == o.direction &&
          exchange_id == o.exchange_id &&
          execution_type == o.execution_type &&
          expire_date == o.expire_date &&
          gamma == o.gamma &&
          high == o.high &&
          imp_vol == o.imp_vol &&
          latest_price_vol == o.latest_price_vol &&
          low == o.low &&
          open == o.open &&
          open_int_change == o.open_int_change &&
          open_interest == o.open_interest &&
          pre_close == o.pre_close &&
          quote_lot_size == o.quote_lot_size &&
          quote_multiplier == o.quote_multiplier &&
          region_id == o.region_id &&
          rho == o.rho &&
          strike_price == o.strike_price &&
          symbol == o.symbol &&
          theta == o.theta &&
          ticker_id == o.ticker_id &&
          un_symbol == o.un_symbol &&
          vega == o.vega &&
          volume == o.volume &&
          weekly == o.weekly
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [active_level, ask_list, belong_ticker_id, bid_list, change, change_ratio, close, currency_id, cycle, delta, derivative_status, direction, exchange_id, execution_type, expire_date, gamma, high, imp_vol, latest_price_vol, low, open, open_int_change, open_interest, pre_close, quote_lot_size, quote_multiplier, region_id, rho, strike_price, symbol, theta, ticker_id, un_symbol, vega, volume, weekly].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = WebullApiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
