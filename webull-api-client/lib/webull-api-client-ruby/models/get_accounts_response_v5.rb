=begin
#Webull API

#Webull API Documentation

The version of the OpenAPI document: 3.0.1
Contact: austin.millan@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'date'
require 'time'

module WebullApiClient
  class GetAccountsResponseV5
    attr_accessor :net_liquidation

    attr_accessor :unrealized_profit_loss

    attr_accessor :unrealized_profit_loss_rate

    attr_accessor :currency

    attr_accessor :currency_id

    attr_accessor :accounts

    attr_accessor :positions

    attr_accessor :open_orders

    attr_accessor :open_order_size

    attr_accessor :positions2

    attr_accessor :open_orders2

    attr_accessor :open_ipo_orders

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'net_liquidation' => :'netLiquidation',
        :'unrealized_profit_loss' => :'unrealizedProfitLoss',
        :'unrealized_profit_loss_rate' => :'unrealizedProfitLossRate',
        :'currency' => :'currency',
        :'currency_id' => :'currencyId',
        :'accounts' => :'accounts',
        :'positions' => :'positions',
        :'open_orders' => :'openOrders',
        :'open_order_size' => :'openOrderSize',
        :'positions2' => :'positions2',
        :'open_orders2' => :'openOrders2',
        :'open_ipo_orders' => :'openIpoOrders'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'net_liquidation' => :'String',
        :'unrealized_profit_loss' => :'String',
        :'unrealized_profit_loss_rate' => :'String',
        :'currency' => :'String',
        :'currency_id' => :'Float',
        :'accounts' => :'Array<GetAccountsResponseV5Accounts>',
        :'positions' => :'Array<Object>',
        :'open_orders' => :'Array<Object>',
        :'open_order_size' => :'Float',
        :'positions2' => :'Array<GetAccountsResponseV5Positions2>',
        :'open_orders2' => :'Array<Object>',
        :'open_ipo_orders' => :'Array<Object>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `WebullApiClient::GetAccountsResponseV5` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `WebullApiClient::GetAccountsResponseV5`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'net_liquidation')
        self.net_liquidation = attributes[:'net_liquidation']
      end

      if attributes.key?(:'unrealized_profit_loss')
        self.unrealized_profit_loss = attributes[:'unrealized_profit_loss']
      end

      if attributes.key?(:'unrealized_profit_loss_rate')
        self.unrealized_profit_loss_rate = attributes[:'unrealized_profit_loss_rate']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'currency_id')
        self.currency_id = attributes[:'currency_id']
      end

      if attributes.key?(:'accounts')
        if (value = attributes[:'accounts']).is_a?(Array)
          self.accounts = value
        end
      end

      if attributes.key?(:'positions')
        if (value = attributes[:'positions']).is_a?(Array)
          self.positions = value
        end
      end

      if attributes.key?(:'open_orders')
        if (value = attributes[:'open_orders']).is_a?(Array)
          self.open_orders = value
        end
      end

      if attributes.key?(:'open_order_size')
        self.open_order_size = attributes[:'open_order_size']
      end

      if attributes.key?(:'positions2')
        if (value = attributes[:'positions2']).is_a?(Array)
          self.positions2 = value
        end
      end

      if attributes.key?(:'open_orders2')
        if (value = attributes[:'open_orders2']).is_a?(Array)
          self.open_orders2 = value
        end
      end

      if attributes.key?(:'open_ipo_orders')
        if (value = attributes[:'open_ipo_orders']).is_a?(Array)
          self.open_ipo_orders = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          net_liquidation == o.net_liquidation &&
          unrealized_profit_loss == o.unrealized_profit_loss &&
          unrealized_profit_loss_rate == o.unrealized_profit_loss_rate &&
          currency == o.currency &&
          currency_id == o.currency_id &&
          accounts == o.accounts &&
          positions == o.positions &&
          open_orders == o.open_orders &&
          open_order_size == o.open_order_size &&
          positions2 == o.positions2 &&
          open_orders2 == o.open_orders2 &&
          open_ipo_orders == o.open_ipo_orders
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [net_liquidation, unrealized_profit_loss, unrealized_profit_loss_rate, currency, currency_id, accounts, positions, open_orders, open_order_size, positions2, open_orders2, open_ipo_orders].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = WebullApiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
