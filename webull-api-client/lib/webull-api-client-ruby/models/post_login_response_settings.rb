=begin
#Webull API

#Webull API Documentation

The version of the OpenAPI document: 3.0.1
Contact: austin.millan@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'date'
require 'time'

module WebullApiClient
  class PostLoginResponseSettings
    attr_accessor :chart_option

    attr_accessor :create_time

    attr_accessor :focus_market_id

    attr_accessor :font_size

    attr_accessor :hot_news

    attr_accessor :id

    attr_accessor :incre_decre_color

    attr_accessor :kdata

    attr_accessor :language

    attr_accessor :language_update_time

    attr_accessor :list_style

    attr_accessor :operate_time

    attr_accessor :order_deal_remind

    attr_accessor :portfolio_bulletin

    attr_accessor :portfolio_display_mode

    attr_accessor :portfolio_holdings_display

    attr_accessor :portfolio_index_display

    attr_accessor :portfolio_name_newline

    attr_accessor :refresh_frequency

    attr_accessor :region_id

    attr_accessor :shock

    attr_accessor :theme

    attr_accessor :ticker_price_remind

    attr_accessor :update_time

    attr_accessor :user_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'chart_option' => :'chartOption',
        :'create_time' => :'createTime',
        :'focus_market_id' => :'focusMarketId',
        :'font_size' => :'fontSize',
        :'hot_news' => :'hotNews',
        :'id' => :'id',
        :'incre_decre_color' => :'increDecreColor',
        :'kdata' => :'kdata',
        :'language' => :'language',
        :'language_update_time' => :'languageUpdateTime',
        :'list_style' => :'listStyle',
        :'operate_time' => :'operateTime',
        :'order_deal_remind' => :'orderDealRemind',
        :'portfolio_bulletin' => :'portfolioBulletin',
        :'portfolio_display_mode' => :'portfolioDisplayMode',
        :'portfolio_holdings_display' => :'portfolioHoldingsDisplay',
        :'portfolio_index_display' => :'portfolioIndexDisplay',
        :'portfolio_name_newline' => :'portfolioNameNewline',
        :'refresh_frequency' => :'refreshFrequency',
        :'region_id' => :'regionId',
        :'shock' => :'shock',
        :'theme' => :'theme',
        :'ticker_price_remind' => :'tickerPriceRemind',
        :'update_time' => :'updateTime',
        :'user_id' => :'userId'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'chart_option' => :'Integer',
        :'create_time' => :'String',
        :'focus_market_id' => :'String',
        :'font_size' => :'String',
        :'hot_news' => :'Integer',
        :'id' => :'Float',
        :'incre_decre_color' => :'Integer',
        :'kdata' => :'Integer',
        :'language' => :'String',
        :'language_update_time' => :'String',
        :'list_style' => :'Integer',
        :'operate_time' => :'String',
        :'order_deal_remind' => :'Integer',
        :'portfolio_bulletin' => :'Integer',
        :'portfolio_display_mode' => :'Integer',
        :'portfolio_holdings_display' => :'Integer',
        :'portfolio_index_display' => :'Integer',
        :'portfolio_name_newline' => :'Integer',
        :'refresh_frequency' => :'Integer',
        :'region_id' => :'Integer',
        :'shock' => :'Integer',
        :'theme' => :'Integer',
        :'ticker_price_remind' => :'Integer',
        :'update_time' => :'String',
        :'user_id' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `WebullApiClient::PostLoginResponseSettings` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `WebullApiClient::PostLoginResponseSettings`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'chart_option')
        self.chart_option = attributes[:'chart_option']
      end

      if attributes.key?(:'create_time')
        self.create_time = attributes[:'create_time']
      end

      if attributes.key?(:'focus_market_id')
        self.focus_market_id = attributes[:'focus_market_id']
      end

      if attributes.key?(:'font_size')
        self.font_size = attributes[:'font_size']
      end

      if attributes.key?(:'hot_news')
        self.hot_news = attributes[:'hot_news']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'incre_decre_color')
        self.incre_decre_color = attributes[:'incre_decre_color']
      end

      if attributes.key?(:'kdata')
        self.kdata = attributes[:'kdata']
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'language_update_time')
        self.language_update_time = attributes[:'language_update_time']
      end

      if attributes.key?(:'list_style')
        self.list_style = attributes[:'list_style']
      end

      if attributes.key?(:'operate_time')
        self.operate_time = attributes[:'operate_time']
      end

      if attributes.key?(:'order_deal_remind')
        self.order_deal_remind = attributes[:'order_deal_remind']
      end

      if attributes.key?(:'portfolio_bulletin')
        self.portfolio_bulletin = attributes[:'portfolio_bulletin']
      end

      if attributes.key?(:'portfolio_display_mode')
        self.portfolio_display_mode = attributes[:'portfolio_display_mode']
      end

      if attributes.key?(:'portfolio_holdings_display')
        self.portfolio_holdings_display = attributes[:'portfolio_holdings_display']
      end

      if attributes.key?(:'portfolio_index_display')
        self.portfolio_index_display = attributes[:'portfolio_index_display']
      end

      if attributes.key?(:'portfolio_name_newline')
        self.portfolio_name_newline = attributes[:'portfolio_name_newline']
      end

      if attributes.key?(:'refresh_frequency')
        self.refresh_frequency = attributes[:'refresh_frequency']
      end

      if attributes.key?(:'region_id')
        self.region_id = attributes[:'region_id']
      end

      if attributes.key?(:'shock')
        self.shock = attributes[:'shock']
      end

      if attributes.key?(:'theme')
        self.theme = attributes[:'theme']
      end

      if attributes.key?(:'ticker_price_remind')
        self.ticker_price_remind = attributes[:'ticker_price_remind']
      end

      if attributes.key?(:'update_time')
        self.update_time = attributes[:'update_time']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          chart_option == o.chart_option &&
          create_time == o.create_time &&
          focus_market_id == o.focus_market_id &&
          font_size == o.font_size &&
          hot_news == o.hot_news &&
          id == o.id &&
          incre_decre_color == o.incre_decre_color &&
          kdata == o.kdata &&
          language == o.language &&
          language_update_time == o.language_update_time &&
          list_style == o.list_style &&
          operate_time == o.operate_time &&
          order_deal_remind == o.order_deal_remind &&
          portfolio_bulletin == o.portfolio_bulletin &&
          portfolio_display_mode == o.portfolio_display_mode &&
          portfolio_holdings_display == o.portfolio_holdings_display &&
          portfolio_index_display == o.portfolio_index_display &&
          portfolio_name_newline == o.portfolio_name_newline &&
          refresh_frequency == o.refresh_frequency &&
          region_id == o.region_id &&
          shock == o.shock &&
          theme == o.theme &&
          ticker_price_remind == o.ticker_price_remind &&
          update_time == o.update_time &&
          user_id == o.user_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [chart_option, create_time, focus_market_id, font_size, hot_news, id, incre_decre_color, kdata, language, language_update_time, list_style, operate_time, order_deal_remind, portfolio_bulletin, portfolio_display_mode, portfolio_holdings_display, portfolio_index_display, portfolio_name_newline, refresh_frequency, region_id, shock, theme, ticker_price_remind, update_time, user_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = WebullApiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
