=begin
#Webull API

#Webull API Documentation

The version of the OpenAPI document: 3.0.1
Contact: austin.millan@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'date'
require 'time'

module WebullApiClient
  class Transfer
    attr_accessor :id

    attr_accessor :sec_account_id

    attr_accessor :broker_account_id

    attr_accessor :type

    attr_accessor :direction

    attr_accessor :amount

    attr_accessor :amount_str

    attr_accessor :currency

    attr_accessor :transfer_id

    attr_accessor :external_transfer_id

    attr_accessor :status

    attr_accessor :sub_status

    attr_accessor :ach_id

    attr_accessor :bank_id

    attr_accessor :bank_type

    attr_accessor :bank_account

    attr_accessor :bank_account_name

    attr_accessor :customer_type

    attr_accessor :create_time

    attr_accessor :update_time

    attr_accessor :create_time_str

    attr_accessor :finish_time

    attr_accessor :available_time

    attr_accessor :available_lamp_send_status

    attr_accessor :available_time_str

    attr_accessor :return_send_status

    attr_accessor :record_send_status

    attr_accessor :serial_id

    attr_accessor :arrive_time

    attr_accessor :first_gift

    attr_accessor :wait_card_binding

    attr_accessor :tips_info

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'sec_account_id' => :'secAccountId',
        :'broker_account_id' => :'brokerAccountId',
        :'type' => :'type',
        :'direction' => :'direction',
        :'amount' => :'amount',
        :'amount_str' => :'amountStr',
        :'currency' => :'currency',
        :'transfer_id' => :'transferId',
        :'external_transfer_id' => :'externalTransferId',
        :'status' => :'status',
        :'sub_status' => :'subStatus',
        :'ach_id' => :'achId',
        :'bank_id' => :'bankId',
        :'bank_type' => :'bankType',
        :'bank_account' => :'bankAccount',
        :'bank_account_name' => :'bankAccountName',
        :'customer_type' => :'customerType',
        :'create_time' => :'createTime',
        :'update_time' => :'updateTime',
        :'create_time_str' => :'createTimeStr',
        :'finish_time' => :'finishTime',
        :'available_time' => :'availableTime',
        :'available_lamp_send_status' => :'availableLampSendStatus',
        :'available_time_str' => :'availableTimeStr',
        :'return_send_status' => :'returnSendStatus',
        :'record_send_status' => :'recordSendStatus',
        :'serial_id' => :'serialId',
        :'arrive_time' => :'arriveTime',
        :'first_gift' => :'firstGift',
        :'wait_card_binding' => :'waitCardBinding',
        :'tips_info' => :'tipsInfo'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Float',
        :'sec_account_id' => :'Float',
        :'broker_account_id' => :'String',
        :'type' => :'String',
        :'direction' => :'String',
        :'amount' => :'Float',
        :'amount_str' => :'String',
        :'currency' => :'String',
        :'transfer_id' => :'String',
        :'external_transfer_id' => :'String',
        :'status' => :'String',
        :'sub_status' => :'String',
        :'ach_id' => :'String',
        :'bank_id' => :'String',
        :'bank_type' => :'String',
        :'bank_account' => :'String',
        :'bank_account_name' => :'String',
        :'customer_type' => :'String',
        :'create_time' => :'String',
        :'update_time' => :'String',
        :'create_time_str' => :'Date',
        :'finish_time' => :'String',
        :'available_time' => :'String',
        :'available_lamp_send_status' => :'String',
        :'available_time_str' => :'Date',
        :'return_send_status' => :'String',
        :'record_send_status' => :'String',
        :'serial_id' => :'String',
        :'arrive_time' => :'String',
        :'first_gift' => :'Boolean',
        :'wait_card_binding' => :'Boolean',
        :'tips_info' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `WebullApiClient::Transfer` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `WebullApiClient::Transfer`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'sec_account_id')
        self.sec_account_id = attributes[:'sec_account_id']
      end

      if attributes.key?(:'broker_account_id')
        self.broker_account_id = attributes[:'broker_account_id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'direction')
        self.direction = attributes[:'direction']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'amount_str')
        self.amount_str = attributes[:'amount_str']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'transfer_id')
        self.transfer_id = attributes[:'transfer_id']
      end

      if attributes.key?(:'external_transfer_id')
        self.external_transfer_id = attributes[:'external_transfer_id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'sub_status')
        self.sub_status = attributes[:'sub_status']
      end

      if attributes.key?(:'ach_id')
        self.ach_id = attributes[:'ach_id']
      end

      if attributes.key?(:'bank_id')
        self.bank_id = attributes[:'bank_id']
      end

      if attributes.key?(:'bank_type')
        self.bank_type = attributes[:'bank_type']
      end

      if attributes.key?(:'bank_account')
        self.bank_account = attributes[:'bank_account']
      end

      if attributes.key?(:'bank_account_name')
        self.bank_account_name = attributes[:'bank_account_name']
      end

      if attributes.key?(:'customer_type')
        self.customer_type = attributes[:'customer_type']
      end

      if attributes.key?(:'create_time')
        self.create_time = attributes[:'create_time']
      end

      if attributes.key?(:'update_time')
        self.update_time = attributes[:'update_time']
      end

      if attributes.key?(:'create_time_str')
        self.create_time_str = attributes[:'create_time_str']
      end

      if attributes.key?(:'finish_time')
        self.finish_time = attributes[:'finish_time']
      end

      if attributes.key?(:'available_time')
        self.available_time = attributes[:'available_time']
      end

      if attributes.key?(:'available_lamp_send_status')
        self.available_lamp_send_status = attributes[:'available_lamp_send_status']
      end

      if attributes.key?(:'available_time_str')
        self.available_time_str = attributes[:'available_time_str']
      end

      if attributes.key?(:'return_send_status')
        self.return_send_status = attributes[:'return_send_status']
      end

      if attributes.key?(:'record_send_status')
        self.record_send_status = attributes[:'record_send_status']
      end

      if attributes.key?(:'serial_id')
        self.serial_id = attributes[:'serial_id']
      end

      if attributes.key?(:'arrive_time')
        self.arrive_time = attributes[:'arrive_time']
      end

      if attributes.key?(:'first_gift')
        self.first_gift = attributes[:'first_gift']
      end

      if attributes.key?(:'wait_card_binding')
        self.wait_card_binding = attributes[:'wait_card_binding']
      end

      if attributes.key?(:'tips_info')
        self.tips_info = attributes[:'tips_info']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          sec_account_id == o.sec_account_id &&
          broker_account_id == o.broker_account_id &&
          type == o.type &&
          direction == o.direction &&
          amount == o.amount &&
          amount_str == o.amount_str &&
          currency == o.currency &&
          transfer_id == o.transfer_id &&
          external_transfer_id == o.external_transfer_id &&
          status == o.status &&
          sub_status == o.sub_status &&
          ach_id == o.ach_id &&
          bank_id == o.bank_id &&
          bank_type == o.bank_type &&
          bank_account == o.bank_account &&
          bank_account_name == o.bank_account_name &&
          customer_type == o.customer_type &&
          create_time == o.create_time &&
          update_time == o.update_time &&
          create_time_str == o.create_time_str &&
          finish_time == o.finish_time &&
          available_time == o.available_time &&
          available_lamp_send_status == o.available_lamp_send_status &&
          available_time_str == o.available_time_str &&
          return_send_status == o.return_send_status &&
          record_send_status == o.record_send_status &&
          serial_id == o.serial_id &&
          arrive_time == o.arrive_time &&
          first_gift == o.first_gift &&
          wait_card_binding == o.wait_card_binding &&
          tips_info == o.tips_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, sec_account_id, broker_account_id, type, direction, amount, amount_str, currency, transfer_id, external_transfer_id, status, sub_status, ach_id, bank_id, bank_type, bank_account, bank_account_name, customer_type, create_time, update_time, create_time_str, finish_time, available_time, available_lamp_send_status, available_time_str, return_send_status, record_send_status, serial_id, arrive_time, first_gift, wait_card_binding, tips_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = WebullApiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
