=begin
#Webull API

#Webull API Documentation

The version of the OpenAPI document: 3.0.1
Contact: austin.millan@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'date'
require 'time'

module WebullApiClient
  class ActiveGainersLosers
    attr_accessor :change

    attr_accessor :change_ratio

    attr_accessor :close

    attr_accessor :currency_id

    attr_accessor :derivative_support

    attr_accessor :dis_exchange_code

    attr_accessor :dis_symbol

    attr_accessor :exchange_code

    attr_accessor :exchange_id

    attr_accessor :list_status

    attr_accessor :market_value

    attr_accessor :name

    attr_accessor :p_ch_ratio

    attr_accessor :p_change

    attr_accessor :p_price

    attr_accessor :region_code

    attr_accessor :region_id

    attr_accessor :sec_type

    attr_accessor :status

    attr_accessor :symbol

    attr_accessor :template

    attr_accessor :ticker_id

    attr_accessor :turnover_rate

    attr_accessor :type

    attr_accessor :volume

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'change' => :'change',
        :'change_ratio' => :'changeRatio',
        :'close' => :'close',
        :'currency_id' => :'currencyId',
        :'derivative_support' => :'derivativeSupport',
        :'dis_exchange_code' => :'disExchangeCode',
        :'dis_symbol' => :'disSymbol',
        :'exchange_code' => :'exchangeCode',
        :'exchange_id' => :'exchangeId',
        :'list_status' => :'listStatus',
        :'market_value' => :'marketValue',
        :'name' => :'name',
        :'p_ch_ratio' => :'pChRatio',
        :'p_change' => :'pChange',
        :'p_price' => :'pPrice',
        :'region_code' => :'regionCode',
        :'region_id' => :'regionId',
        :'sec_type' => :'secType',
        :'status' => :'status',
        :'symbol' => :'symbol',
        :'template' => :'template',
        :'ticker_id' => :'tickerId',
        :'turnover_rate' => :'turnoverRate',
        :'type' => :'type',
        :'volume' => :'volume'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'change' => :'String',
        :'change_ratio' => :'String',
        :'close' => :'String',
        :'currency_id' => :'Integer',
        :'derivative_support' => :'Integer',
        :'dis_exchange_code' => :'String',
        :'dis_symbol' => :'String',
        :'exchange_code' => :'String',
        :'exchange_id' => :'Integer',
        :'list_status' => :'Integer',
        :'market_value' => :'String',
        :'name' => :'String',
        :'p_ch_ratio' => :'String',
        :'p_change' => :'String',
        :'p_price' => :'String',
        :'region_code' => :'String',
        :'region_id' => :'Integer',
        :'sec_type' => :'Array<Integer>',
        :'status' => :'String',
        :'symbol' => :'String',
        :'template' => :'String',
        :'ticker_id' => :'Integer',
        :'turnover_rate' => :'String',
        :'type' => :'Integer',
        :'volume' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `WebullApiClient::ActiveGainersLosers` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `WebullApiClient::ActiveGainersLosers`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'change')
        self.change = attributes[:'change']
      end

      if attributes.key?(:'change_ratio')
        self.change_ratio = attributes[:'change_ratio']
      end

      if attributes.key?(:'close')
        self.close = attributes[:'close']
      end

      if attributes.key?(:'currency_id')
        self.currency_id = attributes[:'currency_id']
      end

      if attributes.key?(:'derivative_support')
        self.derivative_support = attributes[:'derivative_support']
      end

      if attributes.key?(:'dis_exchange_code')
        self.dis_exchange_code = attributes[:'dis_exchange_code']
      end

      if attributes.key?(:'dis_symbol')
        self.dis_symbol = attributes[:'dis_symbol']
      end

      if attributes.key?(:'exchange_code')
        self.exchange_code = attributes[:'exchange_code']
      end

      if attributes.key?(:'exchange_id')
        self.exchange_id = attributes[:'exchange_id']
      end

      if attributes.key?(:'list_status')
        self.list_status = attributes[:'list_status']
      end

      if attributes.key?(:'market_value')
        self.market_value = attributes[:'market_value']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'p_ch_ratio')
        self.p_ch_ratio = attributes[:'p_ch_ratio']
      end

      if attributes.key?(:'p_change')
        self.p_change = attributes[:'p_change']
      end

      if attributes.key?(:'p_price')
        self.p_price = attributes[:'p_price']
      end

      if attributes.key?(:'region_code')
        self.region_code = attributes[:'region_code']
      end

      if attributes.key?(:'region_id')
        self.region_id = attributes[:'region_id']
      end

      if attributes.key?(:'sec_type')
        if (value = attributes[:'sec_type']).is_a?(Array)
          self.sec_type = value
        end
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'symbol')
        self.symbol = attributes[:'symbol']
      end

      if attributes.key?(:'template')
        self.template = attributes[:'template']
      end

      if attributes.key?(:'ticker_id')
        self.ticker_id = attributes[:'ticker_id']
      end

      if attributes.key?(:'turnover_rate')
        self.turnover_rate = attributes[:'turnover_rate']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'volume')
        self.volume = attributes[:'volume']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          change == o.change &&
          change_ratio == o.change_ratio &&
          close == o.close &&
          currency_id == o.currency_id &&
          derivative_support == o.derivative_support &&
          dis_exchange_code == o.dis_exchange_code &&
          dis_symbol == o.dis_symbol &&
          exchange_code == o.exchange_code &&
          exchange_id == o.exchange_id &&
          list_status == o.list_status &&
          market_value == o.market_value &&
          name == o.name &&
          p_ch_ratio == o.p_ch_ratio &&
          p_change == o.p_change &&
          p_price == o.p_price &&
          region_code == o.region_code &&
          region_id == o.region_id &&
          sec_type == o.sec_type &&
          status == o.status &&
          symbol == o.symbol &&
          template == o.template &&
          ticker_id == o.ticker_id &&
          turnover_rate == o.turnover_rate &&
          type == o.type &&
          volume == o.volume
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [change, change_ratio, close, currency_id, derivative_support, dis_exchange_code, dis_symbol, exchange_code, exchange_id, list_status, market_value, name, p_ch_ratio, p_change, p_price, region_code, region_id, sec_type, status, symbol, template, ticker_id, turnover_rate, type, volume].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = WebullApiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
