=begin
#Webull API

#Webull API Documentation

The version of the OpenAPI document: 3.0.1
Contact: austin.millan@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'date'
require 'time'

module WebullApiClient
  class GetSecurityAccountsResponseData
    attr_accessor :account_types

    attr_accessor :allow_deposit

    attr_accessor :broker_account_id

    attr_accessor :broker_id

    attr_accessor :broker_name

    attr_accessor :combo_types

    attr_accessor :customer_type

    attr_accessor :deposit

    attr_accessor :deposit_status

    attr_accessor :gift_stock_status

    attr_accessor :is_default

    attr_accessor :is_default_checked

    attr_accessor :open_account_url

    attr_accessor :option_open_status

    attr_accessor :register_region_id

    attr_accessor :register_trade_url

    attr_accessor :sec_account_id

    attr_accessor :status

    attr_accessor :support_click_ipo

    attr_accessor :support_open_option

    attr_accessor :support_outside_rth

    attr_accessor :ticker_types

    attr_accessor :time_in_forces

    attr_accessor :user_trade_permission_vos

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_types' => :'accountTypes',
        :'allow_deposit' => :'allowDeposit',
        :'broker_account_id' => :'brokerAccountId',
        :'broker_id' => :'brokerId',
        :'broker_name' => :'brokerName',
        :'combo_types' => :'comboTypes',
        :'customer_type' => :'customerType',
        :'deposit' => :'deposit',
        :'deposit_status' => :'depositStatus',
        :'gift_stock_status' => :'giftStockStatus',
        :'is_default' => :'isDefault',
        :'is_default_checked' => :'isDefaultChecked',
        :'open_account_url' => :'openAccountUrl',
        :'option_open_status' => :'optionOpenStatus',
        :'register_region_id' => :'registerRegionId',
        :'register_trade_url' => :'registerTradeUrl',
        :'sec_account_id' => :'secAccountId',
        :'status' => :'status',
        :'support_click_ipo' => :'supportClickIPO',
        :'support_open_option' => :'supportOpenOption',
        :'support_outside_rth' => :'supportOutsideRth',
        :'ticker_types' => :'tickerTypes',
        :'time_in_forces' => :'timeInForces',
        :'user_trade_permission_vos' => :'userTradePermissionVOs'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'account_types' => :'Array<String>',
        :'allow_deposit' => :'Boolean',
        :'broker_account_id' => :'String',
        :'broker_id' => :'Integer',
        :'broker_name' => :'String',
        :'combo_types' => :'Array<String>',
        :'customer_type' => :'String',
        :'deposit' => :'Boolean',
        :'deposit_status' => :'String',
        :'gift_stock_status' => :'Integer',
        :'is_default' => :'Boolean',
        :'is_default_checked' => :'Boolean',
        :'open_account_url' => :'String',
        :'option_open_status' => :'String',
        :'register_region_id' => :'Integer',
        :'register_trade_url' => :'String',
        :'sec_account_id' => :'Integer',
        :'status' => :'String',
        :'support_click_ipo' => :'Boolean',
        :'support_open_option' => :'Boolean',
        :'support_outside_rth' => :'Boolean',
        :'ticker_types' => :'Array<GetSecurityAccountsResponseTickerTypes>',
        :'time_in_forces' => :'Array<GetSecurityAccountsResponseTimeInForces>',
        :'user_trade_permission_vos' => :'Array<GetSecurityAccountsResponseUserTradePermissionVOs>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `WebullApiClient::GetSecurityAccountsResponseData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `WebullApiClient::GetSecurityAccountsResponseData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'account_types')
        if (value = attributes[:'account_types']).is_a?(Array)
          self.account_types = value
        end
      end

      if attributes.key?(:'allow_deposit')
        self.allow_deposit = attributes[:'allow_deposit']
      end

      if attributes.key?(:'broker_account_id')
        self.broker_account_id = attributes[:'broker_account_id']
      end

      if attributes.key?(:'broker_id')
        self.broker_id = attributes[:'broker_id']
      end

      if attributes.key?(:'broker_name')
        self.broker_name = attributes[:'broker_name']
      end

      if attributes.key?(:'combo_types')
        if (value = attributes[:'combo_types']).is_a?(Array)
          self.combo_types = value
        end
      end

      if attributes.key?(:'customer_type')
        self.customer_type = attributes[:'customer_type']
      end

      if attributes.key?(:'deposit')
        self.deposit = attributes[:'deposit']
      end

      if attributes.key?(:'deposit_status')
        self.deposit_status = attributes[:'deposit_status']
      end

      if attributes.key?(:'gift_stock_status')
        self.gift_stock_status = attributes[:'gift_stock_status']
      end

      if attributes.key?(:'is_default')
        self.is_default = attributes[:'is_default']
      end

      if attributes.key?(:'is_default_checked')
        self.is_default_checked = attributes[:'is_default_checked']
      end

      if attributes.key?(:'open_account_url')
        self.open_account_url = attributes[:'open_account_url']
      end

      if attributes.key?(:'option_open_status')
        self.option_open_status = attributes[:'option_open_status']
      end

      if attributes.key?(:'register_region_id')
        self.register_region_id = attributes[:'register_region_id']
      end

      if attributes.key?(:'register_trade_url')
        self.register_trade_url = attributes[:'register_trade_url']
      end

      if attributes.key?(:'sec_account_id')
        self.sec_account_id = attributes[:'sec_account_id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'support_click_ipo')
        self.support_click_ipo = attributes[:'support_click_ipo']
      end

      if attributes.key?(:'support_open_option')
        self.support_open_option = attributes[:'support_open_option']
      end

      if attributes.key?(:'support_outside_rth')
        self.support_outside_rth = attributes[:'support_outside_rth']
      end

      if attributes.key?(:'ticker_types')
        if (value = attributes[:'ticker_types']).is_a?(Array)
          self.ticker_types = value
        end
      end

      if attributes.key?(:'time_in_forces')
        if (value = attributes[:'time_in_forces']).is_a?(Array)
          self.time_in_forces = value
        end
      end

      if attributes.key?(:'user_trade_permission_vos')
        if (value = attributes[:'user_trade_permission_vos']).is_a?(Array)
          self.user_trade_permission_vos = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_types == o.account_types &&
          allow_deposit == o.allow_deposit &&
          broker_account_id == o.broker_account_id &&
          broker_id == o.broker_id &&
          broker_name == o.broker_name &&
          combo_types == o.combo_types &&
          customer_type == o.customer_type &&
          deposit == o.deposit &&
          deposit_status == o.deposit_status &&
          gift_stock_status == o.gift_stock_status &&
          is_default == o.is_default &&
          is_default_checked == o.is_default_checked &&
          open_account_url == o.open_account_url &&
          option_open_status == o.option_open_status &&
          register_region_id == o.register_region_id &&
          register_trade_url == o.register_trade_url &&
          sec_account_id == o.sec_account_id &&
          status == o.status &&
          support_click_ipo == o.support_click_ipo &&
          support_open_option == o.support_open_option &&
          support_outside_rth == o.support_outside_rth &&
          ticker_types == o.ticker_types &&
          time_in_forces == o.time_in_forces &&
          user_trade_permission_vos == o.user_trade_permission_vos
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account_types, allow_deposit, broker_account_id, broker_id, broker_name, combo_types, customer_type, deposit, deposit_status, gift_stock_status, is_default, is_default_checked, open_account_url, option_open_status, register_region_id, register_trade_url, sec_account_id, status, support_click_ipo, support_open_option, support_outside_rth, ticker_types, time_in_forces, user_trade_permission_vos].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = WebullApiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
