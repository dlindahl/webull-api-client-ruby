=begin
#Webull API

#Webull API Documentation

The version of the OpenAPI document: 3.0.1
Contact: austin.millan@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'cgi'

module WebullApiClient
  class AccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # getAccount
    # Query for your account ID. Account ID is needed for many private APIs.
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param [Hash] opts the optional parameters
    # @return [GetSecurityAccountsResponse]
    def get_account(did, access_token, opts = {})
      data, _status_code, _headers = get_account_with_http_info(did, access_token, opts)
      data
    end

    # getAccount
    # Query for your account ID. Account ID is needed for many private APIs.
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSecurityAccountsResponse, Integer, Hash)>] GetSecurityAccountsResponse data, response status code and response headers
    def get_account_with_http_info(did, access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_account ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling AccountsApi.get_account"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling AccountsApi.get_account"
      end
      # resource path
      local_var_path = '/account/getSecAccountList/v4'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSecurityAccountsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AccountsApi.get_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getAccountInfo
    # Query for account information. This includes positions, portfolio, etc.
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param account_id [String] Account ID of the user to get
    # @param [Hash] opts the optional parameters
    # @return [GetAccountResponse]
    def get_account_info(did, access_token, account_id, opts = {})
      data, _status_code, _headers = get_account_info_with_http_info(did, access_token, account_id, opts)
      data
    end

    # getAccountInfo
    # Query for account information. This includes positions, portfolio, etc.
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param account_id [String] Account ID of the user to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAccountResponse, Integer, Hash)>] GetAccountResponse data, response status code and response headers
    def get_account_info_with_http_info(did, access_token, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_account_info ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling AccountsApi.get_account_info"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling AccountsApi.get_account_info"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_account_info"
      end
      # resource path
      local_var_path = '/v2/home/{account_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AccountsApi.get_account_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getAccountInfo
    # Query for account information. This includes positions, portfolio, etc.
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param account_id [String] Account ID of the user to get
    # @param [Hash] opts the optional parameters
    # @return [GetAccountsResponseV5]
    def get_account_info_v5(did, access_token, account_id, opts = {})
      data, _status_code, _headers = get_account_info_v5_with_http_info(did, access_token, account_id, opts)
      data
    end

    # getAccountInfo
    # Query for account information. This includes positions, portfolio, etc.
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param account_id [String] Account ID of the user to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAccountsResponseV5, Integer, Hash)>] GetAccountsResponseV5 data, response status code and response headers
    def get_account_info_v5_with_http_info(did, access_token, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_account_info_v5 ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling AccountsApi.get_account_info_v5"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling AccountsApi.get_account_info_v5"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_account_info_v5"
      end
      # resource path
      local_var_path = '/v5/home/'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAccountsResponseV5'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AccountsApi.get_account_info_v5",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account_info_v5\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getTransferHistory
    # Get transfer history
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [GetTransfersRequest] :get_transfers_request 
    # @return [Array<Object>]
    def get_transfer_history(did, access_token, account_id, opts = {})
      data, _status_code, _headers = get_transfer_history_with_http_info(did, access_token, account_id, opts)
      data
    end

    # getTransferHistory
    # Get transfer history
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [GetTransfersRequest] :get_transfers_request 
    # @return [Array<(Array<Object>, Integer, Hash)>] Array<Object> data, response status code and response headers
    def get_transfer_history_with_http_info(did, access_token, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_transfer_history ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling AccountsApi.get_transfer_history"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling AccountsApi.get_transfer_history"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_transfer_history"
      end
      # resource path
      local_var_path = '/asset/{account_id}/getWebullTransferList'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'get_transfers_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AccountsApi.get_transfer_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_transfer_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
