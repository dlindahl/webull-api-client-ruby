=begin
#Webull API

#Webull API Documentation

The version of the OpenAPI document: 3.0.1
Contact: austin.millan@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'cgi'

module WebullApiClient
  class StocksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # getActiveGainersLosers
    # Active gainers / losers
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param direction [AdvancedDeclinedDirection] Direction
    # @param region_id [String] regionId
    # @param user_region_id [String] userRegionId
    # @param [Hash] opts the optional parameters
    # @return [Array<ActiveGainersLosers>]
    def get_active_gainers_losers(did, access_token, direction, region_id, user_region_id, opts = {})
      data, _status_code, _headers = get_active_gainers_losers_with_http_info(did, access_token, direction, region_id, user_region_id, opts)
      data
    end

    # getActiveGainersLosers
    # Active gainers / losers
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param direction [AdvancedDeclinedDirection] Direction
    # @param region_id [String] regionId
    # @param user_region_id [String] userRegionId
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ActiveGainersLosers>, Integer, Hash)>] Array<ActiveGainersLosers> data, response status code and response headers
    def get_active_gainers_losers_with_http_info(did, access_token, direction, region_id, user_region_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StocksApi.get_active_gainers_losers ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling StocksApi.get_active_gainers_losers"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling StocksApi.get_active_gainers_losers"
      end
      # verify the required parameter 'direction' is set
      if @api_client.config.client_side_validation && direction.nil?
        fail ArgumentError, "Missing the required parameter 'direction' when calling StocksApi.get_active_gainers_losers"
      end
      # verify the required parameter 'region_id' is set
      if @api_client.config.client_side_validation && region_id.nil?
        fail ArgumentError, "Missing the required parameter 'region_id' when calling StocksApi.get_active_gainers_losers"
      end
      # verify the required parameter 'user_region_id' is set
      if @api_client.config.client_side_validation && user_region_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_region_id' when calling StocksApi.get_active_gainers_losers"
      end
      # resource path
      local_var_path = '/securities/market/v5/card/stockActivityPc.{direction}/list'.sub('{' + 'direction' + '}', CGI.escape(direction.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'regionId'] = region_id
      query_params[:'userRegionId'] = user_region_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ActiveGainersLosers>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StocksApi.get_active_gainers_losers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StocksApi#get_active_gainers_losers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getChartData
    # Get all chart data for the given interval count
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param ticker_ids [Integer] The Ticker IDs to quote
    # @param extend_trading [Integer] Whether to include pre-market and afterhours bars. &#39;1&#39; is used for pre-market and after-hours bars.
    # @param type [String] The precision of the chart data
    # @param count [Integer] The number of bars to return
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ver null (default to '3.37.7')
    # @option opts [String] :device_type null (default to 'Web')
    # @option opts [Float] :timestamp The selected day of chart date to request
    # @return [Array<Object>]
    def get_chart_data(did, access_token, ticker_ids, extend_trading, type, count, opts = {})
      data, _status_code, _headers = get_chart_data_with_http_info(did, access_token, ticker_ids, extend_trading, type, count, opts)
      data
    end

    # getChartData
    # Get all chart data for the given interval count
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param ticker_ids [Integer] The Ticker IDs to quote
    # @param extend_trading [Integer] Whether to include pre-market and afterhours bars. &#39;1&#39; is used for pre-market and after-hours bars.
    # @param type [String] The precision of the chart data
    # @param count [Integer] The number of bars to return
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ver null
    # @option opts [String] :device_type null
    # @option opts [Float] :timestamp The selected day of chart date to request
    # @return [Array<(Array<Object>, Integer, Hash)>] Array<Object> data, response status code and response headers
    def get_chart_data_with_http_info(did, access_token, ticker_ids, extend_trading, type, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StocksApi.get_chart_data ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling StocksApi.get_chart_data"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling StocksApi.get_chart_data"
      end
      # verify the required parameter 'ticker_ids' is set
      if @api_client.config.client_side_validation && ticker_ids.nil?
        fail ArgumentError, "Missing the required parameter 'ticker_ids' when calling StocksApi.get_chart_data"
      end
      # verify the required parameter 'extend_trading' is set
      if @api_client.config.client_side_validation && extend_trading.nil?
        fail ArgumentError, "Missing the required parameter 'extend_trading' when calling StocksApi.get_chart_data"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling StocksApi.get_chart_data"
      end
      # verify enum value
      allowable_values = ["m1", "m5", "m15", "m30", "h1", "h2", "h4", "d1", "w1"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling StocksApi.get_chart_data"
      end
      # resource path
      local_var_path = '/quote/charts/query'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tickerIds'] = ticker_ids
      query_params[:'extendTrading'] = extend_trading
      query_params[:'type'] = type
      query_params[:'count'] = count
      query_params[:'timestamp'] = opts[:'timestamp'] if !opts[:'timestamp'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token
      header_params[:'ver'] = opts[:'ver'] if !opts[:'ver'].nil?
      header_params[:'device-type'] = opts[:'device_type'] if !opts[:'device_type'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StocksApi.get_chart_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StocksApi#get_chart_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getFundamentals
    # getFundamentals
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param stock [Integer] Internal stock ticker ID
    # @param [Hash] opts the optional parameters
    # @return [Array<GetFundamentalsResponse>]
    def get_fundamentals(did, access_token, stock, opts = {})
      data, _status_code, _headers = get_fundamentals_with_http_info(did, access_token, stock, opts)
      data
    end

    # getFundamentals
    # getFundamentals
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param stock [Integer] Internal stock ticker ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<GetFundamentalsResponse>, Integer, Hash)>] Array<GetFundamentalsResponse> data, response status code and response headers
    def get_fundamentals_with_http_info(did, access_token, stock, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StocksApi.get_fundamentals ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling StocksApi.get_fundamentals"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling StocksApi.get_fundamentals"
      end
      # verify the required parameter 'stock' is set
      if @api_client.config.client_side_validation && stock.nil?
        fail ArgumentError, "Missing the required parameter 'stock' when calling StocksApi.get_fundamentals"
      end
      # resource path
      local_var_path = '/securities/financial/index/{stock}'.sub('{' + 'stock' + '}', CGI.escape(stock.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetFundamentalsResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StocksApi.get_fundamentals",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StocksApi#get_fundamentals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getLatestChartData
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param ticker_ids [Integer] The Ticker IDs to quote
    # @param timestamp [Float] The selected day of chart date to request
    # @param extend_trading [Integer] Whether to include pre-market and afterhours bars. &#39;1&#39; is used for pre-market and after-hours bars.
    # @param type [String] The precision of the chart data
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def get_latest_chart_data(did, access_token, ticker_ids, timestamp, extend_trading, type, opts = {})
      data, _status_code, _headers = get_latest_chart_data_with_http_info(did, access_token, ticker_ids, timestamp, extend_trading, type, opts)
      data
    end

    # getLatestChartData
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param ticker_ids [Integer] The Ticker IDs to quote
    # @param timestamp [Float] The selected day of chart date to request
    # @param extend_trading [Integer] Whether to include pre-market and afterhours bars. &#39;1&#39; is used for pre-market and after-hours bars.
    # @param type [String] The precision of the chart data
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Integer, Hash)>] Array<Object> data, response status code and response headers
    def get_latest_chart_data_with_http_info(did, access_token, ticker_ids, timestamp, extend_trading, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StocksApi.get_latest_chart_data ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling StocksApi.get_latest_chart_data"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling StocksApi.get_latest_chart_data"
      end
      # verify the required parameter 'ticker_ids' is set
      if @api_client.config.client_side_validation && ticker_ids.nil?
        fail ArgumentError, "Missing the required parameter 'ticker_ids' when calling StocksApi.get_latest_chart_data"
      end
      # verify the required parameter 'timestamp' is set
      if @api_client.config.client_side_validation && timestamp.nil?
        fail ArgumentError, "Missing the required parameter 'timestamp' when calling StocksApi.get_latest_chart_data"
      end
      # verify the required parameter 'extend_trading' is set
      if @api_client.config.client_side_validation && extend_trading.nil?
        fail ArgumentError, "Missing the required parameter 'extend_trading' when calling StocksApi.get_latest_chart_data"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling StocksApi.get_latest_chart_data"
      end
      # verify enum value
      allowable_values = ["m1", "m5", "m15", "m30", "h1", "h2", "h4", "d1", "w1"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/quote/charts/kdata/latest'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tickerIds'] = ticker_ids
      query_params[:'timestamp'] = timestamp
      query_params[:'extendTrading'] = extend_trading
      query_params[:'type'] = type

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StocksApi.get_latest_chart_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StocksApi#get_latest_chart_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getStockAnalysis
    # Analyze stock based on it's ticker
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param stock [Integer] Internal stock ticker ID
    # @param [Hash] opts the optional parameters
    # @return [GetStockAnalysisResponse]
    def get_stock_analysis(did, access_token, stock, opts = {})
      data, _status_code, _headers = get_stock_analysis_with_http_info(did, access_token, stock, opts)
      data
    end

    # getStockAnalysis
    # Analyze stock based on it&#39;s ticker
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param stock [Integer] Internal stock ticker ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetStockAnalysisResponse, Integer, Hash)>] GetStockAnalysisResponse data, response status code and response headers
    def get_stock_analysis_with_http_info(did, access_token, stock, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StocksApi.get_stock_analysis ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling StocksApi.get_stock_analysis"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling StocksApi.get_stock_analysis"
      end
      # verify the required parameter 'stock' is set
      if @api_client.config.client_side_validation && stock.nil?
        fail ArgumentError, "Missing the required parameter 'stock' when calling StocksApi.get_stock_analysis"
      end
      # resource path
      local_var_path = '/securities/ticker/v5/analysis/{stock}'.sub('{' + 'stock' + '}', CGI.escape(stock.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetStockAnalysisResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StocksApi.get_stock_analysis",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StocksApi#get_stock_analysis\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getStockID
    # Lookup stock ID
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param keys [String] Stock ticker
    # @param query_number [String] queryNumber
    # @param [Hash] opts the optional parameters
    # @return [LookupTickerResponse]
    def get_stock_id(did, access_token, keys, query_number, opts = {})
      data, _status_code, _headers = get_stock_id_with_http_info(did, access_token, keys, query_number, opts)
      data
    end

    # getStockID
    # Lookup stock ID
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param keys [String] Stock ticker
    # @param query_number [String] queryNumber
    # @param [Hash] opts the optional parameters
    # @return [Array<(LookupTickerResponse, Integer, Hash)>] LookupTickerResponse data, response status code and response headers
    def get_stock_id_with_http_info(did, access_token, keys, query_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StocksApi.get_stock_id ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling StocksApi.get_stock_id"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling StocksApi.get_stock_id"
      end
      # verify the required parameter 'keys' is set
      if @api_client.config.client_side_validation && keys.nil?
        fail ArgumentError, "Missing the required parameter 'keys' when calling StocksApi.get_stock_id"
      end
      # verify the required parameter 'query_number' is set
      if @api_client.config.client_side_validation && query_number.nil?
        fail ArgumentError, "Missing the required parameter 'query_number' when calling StocksApi.get_stock_id"
      end
      # resource path
      local_var_path = '/search/tickers5'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'keys'] = keys
      query_params[:'queryNumber'] = query_number

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LookupTickerResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StocksApi.get_stock_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StocksApi#get_stock_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getStockNews
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param stock [Integer] Stocks internal ticker ID
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :current_news_id 0 is the latest article (default to 0)
    # @option opts [Integer] :page_size Number of articles (default to 256)
    # @return [GetNewsResponse]
    def get_stock_news(did, access_token, stock, opts = {})
      data, _status_code, _headers = get_stock_news_with_http_info(did, access_token, stock, opts)
      data
    end

    # getStockNews
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param stock [Integer] Stocks internal ticker ID
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :current_news_id 0 is the latest article
    # @option opts [Integer] :page_size Number of articles
    # @return [Array<(GetNewsResponse, Integer, Hash)>] GetNewsResponse data, response status code and response headers
    def get_stock_news_with_http_info(did, access_token, stock, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StocksApi.get_stock_news ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling StocksApi.get_stock_news"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling StocksApi.get_stock_news"
      end
      # verify the required parameter 'stock' is set
      if @api_client.config.client_side_validation && stock.nil?
        fail ArgumentError, "Missing the required parameter 'stock' when calling StocksApi.get_stock_news"
      end
      # resource path
      local_var_path = '/information/news/v5/tickerNews/{stock}'.sub('{' + 'stock' + '}', CGI.escape(stock.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'currentNewsId'] = opts[:'current_news_id'] if !opts[:'current_news_id'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetNewsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StocksApi.get_stock_news",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StocksApi#get_stock_news\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getStocks
    # Lookup stock tickers
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param keyword [String] Stock ticker
    # @param page_index [String] Page
    # @param page_size [String] Number of results per page
    # @param [Hash] opts the optional parameters
    # @return [LookupStockResponse]
    def get_stocks(did, access_token, keyword, page_index, page_size, opts = {})
      data, _status_code, _headers = get_stocks_with_http_info(did, access_token, keyword, page_index, page_size, opts)
      data
    end

    # getStocks
    # Lookup stock tickers
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param keyword [String] Stock ticker
    # @param page_index [String] Page
    # @param page_size [String] Number of results per page
    # @param [Hash] opts the optional parameters
    # @return [Array<(LookupStockResponse, Integer, Hash)>] LookupStockResponse data, response status code and response headers
    def get_stocks_with_http_info(did, access_token, keyword, page_index, page_size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StocksApi.get_stocks ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling StocksApi.get_stocks"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling StocksApi.get_stocks"
      end
      # verify the required parameter 'keyword' is set
      if @api_client.config.client_side_validation && keyword.nil?
        fail ArgumentError, "Missing the required parameter 'keyword' when calling StocksApi.get_stocks"
      end
      # verify the required parameter 'page_index' is set
      if @api_client.config.client_side_validation && page_index.nil?
        fail ArgumentError, "Missing the required parameter 'page_index' when calling StocksApi.get_stocks"
      end
      # verify the required parameter 'page_size' is set
      if @api_client.config.client_side_validation && page_size.nil?
        fail ArgumentError, "Missing the required parameter 'page_size' when calling StocksApi.get_stocks"
      end
      # resource path
      local_var_path = '/search/pc/tickers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'keyword'] = keyword
      query_params[:'pageIndex'] = page_index
      query_params[:'pageSize'] = page_size

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LookupStockResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StocksApi.get_stocks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StocksApi#get_stocks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getTickerChart
    # Stock symbol to get chart data
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param stock [Integer] Internal stock symbol ID
    # @param count [Integer] Number of bars to return
    # @param extend_trading [Integer] Whether to include pre-market and afterhours bars. &#39;1&#39; is used for pre-market and after-hours bars.
    # @param type [String] X
    # @param [Hash] opts the optional parameters
    # @return [GetTickerChartResponse]
    def get_ticker_chart(did, access_token, stock, count, extend_trading, type, opts = {})
      data, _status_code, _headers = get_ticker_chart_with_http_info(did, access_token, stock, count, extend_trading, type, opts)
      data
    end

    # getTickerChart
    # Stock symbol to get chart data
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param stock [Integer] Internal stock symbol ID
    # @param count [Integer] Number of bars to return
    # @param extend_trading [Integer] Whether to include pre-market and afterhours bars. &#39;1&#39; is used for pre-market and after-hours bars.
    # @param type [String] X
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTickerChartResponse, Integer, Hash)>] GetTickerChartResponse data, response status code and response headers
    def get_ticker_chart_with_http_info(did, access_token, stock, count, extend_trading, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StocksApi.get_ticker_chart ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling StocksApi.get_ticker_chart"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling StocksApi.get_ticker_chart"
      end
      # verify the required parameter 'stock' is set
      if @api_client.config.client_side_validation && stock.nil?
        fail ArgumentError, "Missing the required parameter 'stock' when calling StocksApi.get_ticker_chart"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling StocksApi.get_ticker_chart"
      end
      # verify the required parameter 'extend_trading' is set
      if @api_client.config.client_side_validation && extend_trading.nil?
        fail ArgumentError, "Missing the required parameter 'extend_trading' when calling StocksApi.get_ticker_chart"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling StocksApi.get_ticker_chart"
      end
      # verify enum value
      allowable_values = ["m1", "m5", "m15", "m30", "h1", "h2", "h4", "d1", "w1"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/quote/tickerChartDatas/v5/{stock}'.sub('{' + 'stock' + '}', CGI.escape(stock.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = count
      query_params[:'extendTrading'] = extend_trading
      query_params[:'type'] = type

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTickerChartResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StocksApi.get_ticker_chart",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StocksApi#get_ticker_chart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # saveDraw
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param ticker_id [Integer] The Ticker ID to markup
    # @param inline_object [InlineObject] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def save_draw(did, access_token, ticker_id, inline_object, opts = {})
      data, _status_code, _headers = save_draw_with_http_info(did, access_token, ticker_id, inline_object, opts)
      data
    end

    # saveDraw
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param ticker_id [Integer] The Ticker ID to markup
    # @param inline_object [InlineObject] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def save_draw_with_http_info(did, access_token, ticker_id, inline_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StocksApi.save_draw ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling StocksApi.save_draw"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling StocksApi.save_draw"
      end
      # verify the required parameter 'ticker_id' is set
      if @api_client.config.client_side_validation && ticker_id.nil?
        fail ArgumentError, "Missing the required parameter 'ticker_id' when calling StocksApi.save_draw"
      end
      # verify the required parameter 'inline_object' is set
      if @api_client.config.client_side_validation && inline_object.nil?
        fail ArgumentError, "Missing the required parameter 'inline_object' when calling StocksApi.save_draw"
      end
      # resource path
      local_var_path = '/draw/quote/charts/saveDraw'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tickerId'] = ticker_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(inline_object)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StocksApi.save_draw",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StocksApi#save_draw\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # screener
    # screener (TODO)
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param fetch [Integer] fetch
    # @param rules [Array<SmartRule>] rules
    # @param sort [Object] sort
    # @param attach [Attach] attach
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def screener(did, access_token, fetch, rules, sort, attach, opts = {})
      data, _status_code, _headers = screener_with_http_info(did, access_token, fetch, rules, sort, attach, opts)
      data
    end

    # screener
    # screener (TODO)
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param fetch [Integer] fetch
    # @param rules [Array<SmartRule>] rules
    # @param sort [Object] sort
    # @param attach [Attach] attach
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def screener_with_http_info(did, access_token, fetch, rules, sort, attach, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StocksApi.screener ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling StocksApi.screener"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling StocksApi.screener"
      end
      # verify the required parameter 'fetch' is set
      if @api_client.config.client_side_validation && fetch.nil?
        fail ArgumentError, "Missing the required parameter 'fetch' when calling StocksApi.screener"
      end
      # verify the required parameter 'rules' is set
      if @api_client.config.client_side_validation && rules.nil?
        fail ArgumentError, "Missing the required parameter 'rules' when calling StocksApi.screener"
      end
      # verify the required parameter 'sort' is set
      if @api_client.config.client_side_validation && sort.nil?
        fail ArgumentError, "Missing the required parameter 'sort' when calling StocksApi.screener"
      end
      # verify the required parameter 'attach' is set
      if @api_client.config.client_side_validation && attach.nil?
        fail ArgumentError, "Missing the required parameter 'attach' when calling StocksApi.screener"
      end
      # resource path
      local_var_path = '/wlas/screener/ng/query'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token
      header_params[:'fetch'] = fetch
      header_params[:'rules'] = @api_client.build_collection_param(rules, :csv)
      header_params[:'sort'] = sort
      header_params[:'attach'] = attach

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StocksApi.screener",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StocksApi#screener\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
