=begin
#Webull API

#Webull API Documentation

The version of the OpenAPI document: 3.0.1
Contact: austin.millan@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'cgi'

module WebullApiClient
  class PaperApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # cancelPaperTradeOrder
    # Cancel paper trade
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param paper_account_id [String] 
    # @param order_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def cancel_paper_trade_order(did, access_token, paper_account_id, order_id, opts = {})
      data, _status_code, _headers = cancel_paper_trade_order_with_http_info(did, access_token, paper_account_id, order_id, opts)
      data
    end

    # cancelPaperTradeOrder
    # Cancel paper trade
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param paper_account_id [String] 
    # @param order_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def cancel_paper_trade_order_with_http_info(did, access_token, paper_account_id, order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaperApi.cancel_paper_trade_order ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling PaperApi.cancel_paper_trade_order"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling PaperApi.cancel_paper_trade_order"
      end
      # verify the required parameter 'paper_account_id' is set
      if @api_client.config.client_side_validation && paper_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'paper_account_id' when calling PaperApi.cancel_paper_trade_order"
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling PaperApi.cancel_paper_trade_order"
      end
      # resource path
      local_var_path = '/paper/1/acc/{paper_account_id}/orderop/cancel/{order_id}'.sub('{' + 'paper_account_id' + '}', CGI.escape(paper_account_id.to_s)).sub('{' + 'order_id' + '}', CGI.escape(order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaperApi.cancel_paper_trade_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaperApi#cancel_paper_trade_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getPaperOrders
    # Query for your paper trading orders
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param paper_account_id [Integer] 
    # @param date_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_time  (default to '1970-0-1')
    # @option opts [Float] :page_size  (default to 256)
    # @option opts [OrderStatus] :status 
    # @return [Array<PaperOrder>]
    def get_paper_orders(did, access_token, paper_account_id, date_type, opts = {})
      data, _status_code, _headers = get_paper_orders_with_http_info(did, access_token, paper_account_id, date_type, opts)
      data
    end

    # getPaperOrders
    # Query for your paper trading orders
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param paper_account_id [Integer] 
    # @param date_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_time 
    # @option opts [Float] :page_size 
    # @option opts [OrderStatus] :status 
    # @return [Array<(Array<PaperOrder>, Integer, Hash)>] Array<PaperOrder> data, response status code and response headers
    def get_paper_orders_with_http_info(did, access_token, paper_account_id, date_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaperApi.get_paper_orders ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling PaperApi.get_paper_orders"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling PaperApi.get_paper_orders"
      end
      # verify the required parameter 'paper_account_id' is set
      if @api_client.config.client_side_validation && paper_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'paper_account_id' when calling PaperApi.get_paper_orders"
      end
      # verify the required parameter 'date_type' is set
      if @api_client.config.client_side_validation && date_type.nil?
        fail ArgumentError, "Missing the required parameter 'date_type' when calling PaperApi.get_paper_orders"
      end
      # resource path
      local_var_path = '/paper/1/acc/{paper_account_id}/order'.sub('{' + 'paper_account_id' + '}', CGI.escape(paper_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dateType'] = date_type
      query_params[:'startTime'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PaperOrder>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaperApi.get_paper_orders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaperApi#get_paper_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getPaperTradingAccountID
    # Get paper trading account ID
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param [Hash] opts the optional parameters
    # @return [Array<PaperAccount>]
    def get_paper_trading_account_id(did, access_token, opts = {})
      data, _status_code, _headers = get_paper_trading_account_id_with_http_info(did, access_token, opts)
      data
    end

    # getPaperTradingAccountID
    # Get paper trading account ID
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PaperAccount>, Integer, Hash)>] Array<PaperAccount> data, response status code and response headers
    def get_paper_trading_account_id_with_http_info(did, access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaperApi.get_paper_trading_account_id ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling PaperApi.get_paper_trading_account_id"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling PaperApi.get_paper_trading_account_id"
      end
      # resource path
      local_var_path = '/myaccounts/true'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PaperAccount>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaperApi.get_paper_trading_account_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaperApi#get_paper_trading_account_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # modifyPaperTradeOrder
    # Modify paper trade
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param paper_account_id [Integer] 
    # @param order_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [PostStockOrderRequest] :post_stock_order_request 
    # @return [Object]
    def modify_paper_trade_order(did, access_token, paper_account_id, order_id, opts = {})
      data, _status_code, _headers = modify_paper_trade_order_with_http_info(did, access_token, paper_account_id, order_id, opts)
      data
    end

    # modifyPaperTradeOrder
    # Modify paper trade
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param paper_account_id [Integer] 
    # @param order_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [PostStockOrderRequest] :post_stock_order_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def modify_paper_trade_order_with_http_info(did, access_token, paper_account_id, order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaperApi.modify_paper_trade_order ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling PaperApi.modify_paper_trade_order"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling PaperApi.modify_paper_trade_order"
      end
      # verify the required parameter 'paper_account_id' is set
      if @api_client.config.client_side_validation && paper_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'paper_account_id' when calling PaperApi.modify_paper_trade_order"
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling PaperApi.modify_paper_trade_order"
      end
      # resource path
      local_var_path = '/paper/1/acc/{paper_account_id}/orderop/modify/{order_id}'.sub('{' + 'paper_account_id' + '}', CGI.escape(paper_account_id.to_s)).sub('{' + 'order_id' + '}', CGI.escape(order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_stock_order_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaperApi.modify_paper_trade_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaperApi#modify_paper_trade_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # placePaperTradeOrder
    # Place paper trade
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param paper_account_id [Integer] 
    # @param stock [Integer] Internal stock ticker ID
    # @param [Hash] opts the optional parameters
    # @option opts [PostStockOrderRequest] :post_stock_order_request 
    # @return [PostPaperOrderResponse]
    def place_paper_trade_order(did, access_token, paper_account_id, stock, opts = {})
      data, _status_code, _headers = place_paper_trade_order_with_http_info(did, access_token, paper_account_id, stock, opts)
      data
    end

    # placePaperTradeOrder
    # Place paper trade
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param paper_account_id [Integer] 
    # @param stock [Integer] Internal stock ticker ID
    # @param [Hash] opts the optional parameters
    # @option opts [PostStockOrderRequest] :post_stock_order_request 
    # @return [Array<(PostPaperOrderResponse, Integer, Hash)>] PostPaperOrderResponse data, response status code and response headers
    def place_paper_trade_order_with_http_info(did, access_token, paper_account_id, stock, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaperApi.place_paper_trade_order ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling PaperApi.place_paper_trade_order"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling PaperApi.place_paper_trade_order"
      end
      # verify the required parameter 'paper_account_id' is set
      if @api_client.config.client_side_validation && paper_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'paper_account_id' when calling PaperApi.place_paper_trade_order"
      end
      # verify the required parameter 'stock' is set
      if @api_client.config.client_side_validation && stock.nil?
        fail ArgumentError, "Missing the required parameter 'stock' when calling PaperApi.place_paper_trade_order"
      end
      # resource path
      local_var_path = '/paper/1/acc/{paper_account_id}/orderop/place/{stock}'.sub('{' + 'paper_account_id' + '}', CGI.escape(paper_account_id.to_s)).sub('{' + 'stock' + '}', CGI.escape(stock.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_stock_order_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostPaperOrderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaperApi.place_paper_trade_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaperApi#place_paper_trade_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
