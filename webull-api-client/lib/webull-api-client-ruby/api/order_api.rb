=begin
#Webull API

#Webull API Documentation

The version of the OpenAPI document: 3.0.1
Contact: austin.millan@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'cgi'

module WebullApiClient
  class OrderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # cancelOrder
    # Cancel order
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param t_token [String] Trade token
    # @param t_time [String] Time
    # @param account_id [String] Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def cancel_order(did, access_token, t_token, t_time, account_id, opts = {})
      data, _status_code, _headers = cancel_order_with_http_info(did, access_token, t_token, t_time, account_id, opts)
      data
    end

    # cancelOrder
    # Cancel order
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param t_token [String] Trade token
    # @param t_time [String] Time
    # @param account_id [String] Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Integer, Hash)>] Array<Object> data, response status code and response headers
    def cancel_order_with_http_info(did, access_token, t_token, t_time, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.cancel_order ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling OrderApi.cancel_order"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling OrderApi.cancel_order"
      end
      # verify the required parameter 't_token' is set
      if @api_client.config.client_side_validation && t_token.nil?
        fail ArgumentError, "Missing the required parameter 't_token' when calling OrderApi.cancel_order"
      end
      # verify the required parameter 't_time' is set
      if @api_client.config.client_side_validation && t_time.nil?
        fail ArgumentError, "Missing the required parameter 't_time' when calling OrderApi.cancel_order"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling OrderApi.cancel_order"
      end
      # resource path
      local_var_path = '/order/{account_id}/cancelStockOrder/'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token
      header_params[:'t_token'] = t_token
      header_params[:'t_time'] = t_time

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrderApi.cancel_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#cancel_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cancelOtocoOrder
    # Cancel order
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param t_token [String] Trade token
    # @param t_time [String] Time
    # @param account_id [String] Account ID
    # @param inline_object [InlineObject] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def cancel_otoco_order(did, access_token, t_token, t_time, account_id, inline_object, opts = {})
      data, _status_code, _headers = cancel_otoco_order_with_http_info(did, access_token, t_token, t_time, account_id, inline_object, opts)
      data
    end

    # cancelOtocoOrder
    # Cancel order
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param t_token [String] Trade token
    # @param t_time [String] Time
    # @param account_id [String] Account ID
    # @param inline_object [InlineObject] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Integer, Hash)>] Array<Object> data, response status code and response headers
    def cancel_otoco_order_with_http_info(did, access_token, t_token, t_time, account_id, inline_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.cancel_otoco_order ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling OrderApi.cancel_otoco_order"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling OrderApi.cancel_otoco_order"
      end
      # verify the required parameter 't_token' is set
      if @api_client.config.client_side_validation && t_token.nil?
        fail ArgumentError, "Missing the required parameter 't_token' when calling OrderApi.cancel_otoco_order"
      end
      # verify the required parameter 't_time' is set
      if @api_client.config.client_side_validation && t_time.nil?
        fail ArgumentError, "Missing the required parameter 't_time' when calling OrderApi.cancel_otoco_order"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling OrderApi.cancel_otoco_order"
      end
      # verify the required parameter 'inline_object' is set
      if @api_client.config.client_side_validation && inline_object.nil?
        fail ArgumentError, "Missing the required parameter 'inline_object' when calling OrderApi.cancel_otoco_order"
      end
      # resource path
      local_var_path = '/v2/corder/stock/modify/{account_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token
      header_params[:'t_token'] = t_token
      header_params[:'t_time'] = t_time

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(inline_object)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrderApi.cancel_otoco_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#cancel_otoco_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # checkOtocoOrder
    # Check OTOCO order
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param account_id [String] Account ID
    # @param post_otoco_order_request [PostOtocoOrderRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def check_otoco_order(did, access_token, account_id, post_otoco_order_request, opts = {})
      data, _status_code, _headers = check_otoco_order_with_http_info(did, access_token, account_id, post_otoco_order_request, opts)
      data
    end

    # checkOtocoOrder
    # Check OTOCO order
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param account_id [String] Account ID
    # @param post_otoco_order_request [PostOtocoOrderRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Integer, Hash)>] Array<Object> data, response status code and response headers
    def check_otoco_order_with_http_info(did, access_token, account_id, post_otoco_order_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.check_otoco_order ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling OrderApi.check_otoco_order"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling OrderApi.check_otoco_order"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling OrderApi.check_otoco_order"
      end
      # verify the required parameter 'post_otoco_order_request' is set
      if @api_client.config.client_side_validation && post_otoco_order_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_otoco_order_request' when calling OrderApi.check_otoco_order"
      end
      # resource path
      local_var_path = '/v2/corder/stock/check/{account_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_otoco_order_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrderApi.check_otoco_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#check_otoco_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getOrders
    # Query for orders.
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param sec_account_id [String] Numeric ID of the user to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :t_time Time
    # @option opts [String] :t_token Trade token
    # @option opts [String] :start_time Start date for orders
    # @option opts [String] :date_type Order type (default to 'ORDER')
    # @option opts [Integer] :page_size Page size (default to 256)
    # @option opts [String] :last_create_time Last create time
    # @option opts [String] :last_create_time0 Last create time
    # @option opts [OrderStatus] :status Status of order
    # @return [Array<Object>]
    def get_orders(did, access_token, sec_account_id, opts = {})
      data, _status_code, _headers = get_orders_with_http_info(did, access_token, sec_account_id, opts)
      data
    end

    # getOrders
    # Query for orders.
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param sec_account_id [String] Numeric ID of the user to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :t_time Time
    # @option opts [String] :t_token Trade token
    # @option opts [String] :start_time Start date for orders
    # @option opts [String] :date_type Order type
    # @option opts [Integer] :page_size Page size
    # @option opts [String] :last_create_time Last create time
    # @option opts [String] :last_create_time0 Last create time
    # @option opts [OrderStatus] :status Status of order
    # @return [Array<(Array<Object>, Integer, Hash)>] Array<Object> data, response status code and response headers
    def get_orders_with_http_info(did, access_token, sec_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.get_orders ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling OrderApi.get_orders"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling OrderApi.get_orders"
      end
      # verify the required parameter 'sec_account_id' is set
      if @api_client.config.client_side_validation && sec_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'sec_account_id' when calling OrderApi.get_orders"
      end
      # resource path
      local_var_path = '/v2/option/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'secAccountId'] = sec_account_id
      query_params[:'startTime'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'dateType'] = opts[:'date_type'] if !opts[:'date_type'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'lastCreateTime'] = opts[:'last_create_time'] if !opts[:'last_create_time'].nil?
      query_params[:'lastCreateTime0'] = opts[:'last_create_time0'] if !opts[:'last_create_time0'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token
      header_params[:'t_time'] = opts[:'t_time'] if !opts[:'t_time'].nil?
      header_params[:'t_token'] = opts[:'t_token'] if !opts[:'t_token'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrderApi.get_orders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#get_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # isTradeable
    # isTradeable
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param ticker_id [Integer] Ticker ID is a Stock to query for
    # @param [Hash] opts the optional parameters
    # @return [Array<GetIsTradeableResponse>]
    def is_tradeable(did, access_token, ticker_id, opts = {})
      data, _status_code, _headers = is_tradeable_with_http_info(did, access_token, ticker_id, opts)
      data
    end

    # isTradeable
    # isTradeable
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param ticker_id [Integer] Ticker ID is a Stock to query for
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<GetIsTradeableResponse>, Integer, Hash)>] Array<GetIsTradeableResponse> data, response status code and response headers
    def is_tradeable_with_http_info(did, access_token, ticker_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.is_tradeable ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling OrderApi.is_tradeable"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling OrderApi.is_tradeable"
      end
      # verify the required parameter 'ticker_id' is set
      if @api_client.config.client_side_validation && ticker_id.nil?
        fail ArgumentError, "Missing the required parameter 'ticker_id' when calling OrderApi.is_tradeable"
      end
      # resource path
      local_var_path = '/ticker/broker/permissionV2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tickerId'] = ticker_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetIsTradeableResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrderApi.is_tradeable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#is_tradeable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # modifyOrder
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param t_token [String] Trade token
    # @param t_time [String] Time
    # @param account_id [String] account_id
    # @param order_id [String] order_id
    # @param [Hash] opts the optional parameters
    # @option opts [PostStockOrderRequest] :post_stock_order_request 
    # @return [Object]
    def modify_order(did, access_token, t_token, t_time, account_id, order_id, opts = {})
      data, _status_code, _headers = modify_order_with_http_info(did, access_token, t_token, t_time, account_id, order_id, opts)
      data
    end

    # modifyOrder
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param t_token [String] Trade token
    # @param t_time [String] Time
    # @param account_id [String] account_id
    # @param order_id [String] order_id
    # @param [Hash] opts the optional parameters
    # @option opts [PostStockOrderRequest] :post_stock_order_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def modify_order_with_http_info(did, access_token, t_token, t_time, account_id, order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.modify_order ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling OrderApi.modify_order"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling OrderApi.modify_order"
      end
      # verify the required parameter 't_token' is set
      if @api_client.config.client_side_validation && t_token.nil?
        fail ArgumentError, "Missing the required parameter 't_token' when calling OrderApi.modify_order"
      end
      # verify the required parameter 't_time' is set
      if @api_client.config.client_side_validation && t_time.nil?
        fail ArgumentError, "Missing the required parameter 't_time' when calling OrderApi.modify_order"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling OrderApi.modify_order"
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrderApi.modify_order"
      end
      # resource path
      local_var_path = '/order/{account_id}/modifyStockOrder/{order_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'order_id' + '}', CGI.escape(order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token
      header_params[:'t_token'] = t_token
      header_params[:'t_time'] = t_time

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_stock_order_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrderApi.modify_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#modify_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # placeOrder
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param t_token [String] Trade token
    # @param t_time [String] Time
    # @param account_id [String] account_id
    # @param [Hash] opts the optional parameters
    # @option opts [PostStockOrderRequest] :post_stock_order_request 
    # @return [PostOrderResponse]
    def place_order(did, access_token, t_token, t_time, account_id, opts = {})
      data, _status_code, _headers = place_order_with_http_info(did, access_token, t_token, t_time, account_id, opts)
      data
    end

    # placeOrder
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param t_token [String] Trade token
    # @param t_time [String] Time
    # @param account_id [String] account_id
    # @param [Hash] opts the optional parameters
    # @option opts [PostStockOrderRequest] :post_stock_order_request 
    # @return [Array<(PostOrderResponse, Integer, Hash)>] PostOrderResponse data, response status code and response headers
    def place_order_with_http_info(did, access_token, t_token, t_time, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.place_order ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling OrderApi.place_order"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling OrderApi.place_order"
      end
      # verify the required parameter 't_token' is set
      if @api_client.config.client_side_validation && t_token.nil?
        fail ArgumentError, "Missing the required parameter 't_token' when calling OrderApi.place_order"
      end
      # verify the required parameter 't_time' is set
      if @api_client.config.client_side_validation && t_time.nil?
        fail ArgumentError, "Missing the required parameter 't_time' when calling OrderApi.place_order"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling OrderApi.place_order"
      end
      # resource path
      local_var_path = '/order/{account_id}/placeStockOrder'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token
      header_params[:'t_token'] = t_token
      header_params[:'t_time'] = t_time

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_stock_order_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrderApi.place_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#place_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # placeOtocoOrder
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param t_time [String] Time
    # @param account_id [String] account_id
    # @param post_otoco_order_request [PostOtocoOrderRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def place_otoco_order(did, access_token, t_time, account_id, post_otoco_order_request, opts = {})
      data, _status_code, _headers = place_otoco_order_with_http_info(did, access_token, t_time, account_id, post_otoco_order_request, opts)
      data
    end

    # placeOtocoOrder
    # @param did [String] Device ID
    # @param access_token [String] Access token
    # @param t_time [String] Time
    # @param account_id [String] account_id
    # @param post_otoco_order_request [PostOtocoOrderRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def place_otoco_order_with_http_info(did, access_token, t_time, account_id, post_otoco_order_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.place_otoco_order ...'
      end
      # verify the required parameter 'did' is set
      if @api_client.config.client_side_validation && did.nil?
        fail ArgumentError, "Missing the required parameter 'did' when calling OrderApi.place_otoco_order"
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling OrderApi.place_otoco_order"
      end
      # verify the required parameter 't_time' is set
      if @api_client.config.client_side_validation && t_time.nil?
        fail ArgumentError, "Missing the required parameter 't_time' when calling OrderApi.place_otoco_order"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling OrderApi.place_otoco_order"
      end
      # verify the required parameter 'post_otoco_order_request' is set
      if @api_client.config.client_side_validation && post_otoco_order_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_otoco_order_request' when calling OrderApi.place_otoco_order"
      end
      # resource path
      local_var_path = '/v2/corder/stock/place/{account_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'did'] = did
      header_params[:'access_token'] = access_token
      header_params[:'t_time'] = t_time

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_otoco_order_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrderApi.place_otoco_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#place_otoco_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
